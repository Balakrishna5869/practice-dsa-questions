class Solution {
public:
    int pivot(vector<int>& nums, int s, int e, int n){
        int mid = s + (e-s)/2;
        while(s <= e){
            if(s == e){
                return s;
            }
            if((mid + 1) < n && nums[mid] > nums[mid+1]){
                return mid;
            }
            else if((mid - 1) >= 0 && nums[mid] < nums[mid-1]){
                return mid-1;
            }
            else if(nums[mid] >= nums[s]){
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
            mid = s + (e-s)/2;
        }
        return -1;
    }
    int binarySearch(vector<int>& nums, int s, int e,int target){
        while(s <= e){
            int mid = s + (e-s)/2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] < target){
                s = mid + 1;
            }
            else{
                e = mid -1;
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0;
        int e = n-1;
        int ans = -1;
        int pivotIndex = pivot(nums,s,e,n);
        if(target >= nums[s] && target <= nums[pivotIndex]){
            ans = binarySearch(nums,s,pivotIndex,target);
        }
        else{
            ans = binarySearch(nums,pivotIndex+1,e,target);
        }
        return ans;
    }
};
