class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        // set<vector<int>>st;
        // for(int i = 0; i < n-2; i++){
        //     for(int j = i+1; j < n-1; j++){
        //         for(int k = j+1; k < n; k++){
        //             if(nums[i] + nums[j] + nums[k] == 0){
        //                 vector<int>temp;
        //                 temp.push_back(nums[i]);
        //                 temp.push_back(nums[j]);
        //                 temp.push_back(nums[k]);
        //                 sort(temp.begin(),temp.end());
        //                 st.insert(temp);
        //             }
        //         }
        //     }
        // }
        // vector<vector<int>> ans(st.begin(),st.end());
        // return ans;
        
        // better approach
        // for(int i = 0; i < n; i++){
        //     set<int>s;
        //     for(int j = i+1; j < n; j++){
        //         int rem = -(nums[i] + nums[j]);
        //         if(s.find(rem) != s.end()){
        //             vector<int>temp;
        //             temp.push_back(nums[i]);
        //             temp.push_back(nums[j]);
        //             temp.push_back(rem);
        //             sort(temp.begin(),temp.end());
        //             st.insert(temp);
        //         }
        //         s.insert(nums[j]);

        //     }
        // }
        // vector<vector<int>> ans(st.begin(),st.end());
        // return ans;

        // optimal approach using 2 pointer approach

        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        for(int i = 0; i < n; i++){
            int k = n - 1;
            int j = i + 1;
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            while(j < k){
                
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0){
                    j++;
                }
                else if(sum > 0){
                    k--;
                }
                else{
                    vector<int>temp = {nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j < k && nums[j] == nums[j-1]) j++;
                    while(j < k && nums[k] == nums[k+1]) k--;
                }
            }
        }
        return ans;


    }
};
