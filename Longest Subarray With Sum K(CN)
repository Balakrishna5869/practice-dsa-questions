#include<map>
int longestSubarrayWithSumK(vector<int> a, long long k) {
    // Write your code here
    int n = a.size(); // size of the array.

    // int len = 0;
    // for (int i = 0; i < n; i++) { // starting index
    //     long long s = 0; // Sum variable
    //     for (int j = i; j < n; j++) { // ending index
    //         // add the current element to
    //         // the subarray a[i...j-1]:
    //         s += a[j];

    //         if (s == k)
    //             len = max(len, j - i + 1);
    //     }
    // }
    // return len;

    // better approach using  map + prefix sum technique

    // map<long long, int> prefixSum;
    // long long maxLen = 0;
    // long long sum = 0;
    // for(long long i = 0; i < n; i++){
    //     sum = sum + a[i];

    //     if(sum == k){
    //         maxLen = max(maxLen,i+1);
    //     }
    //     long long rem = sum - k;
    //     if(prefixSum.find(rem) !=  prefixSum.end()){
    //         long long len = i - prefixSum[rem];
    //         maxLen = max(maxLen,len);
    //     }
    //     if(prefixSum.find(sum) ==  prefixSum.end()) 
    //         prefixSum[sum] = i;

    // }
    // return maxLen;

    // optimal approach

    int left = 0;
    int right = 0;
    long long sum = a[0];
    int maxLen = 0;
    while(right < n){
        while(left <= right && sum > k){
            sum -= a[left];
            left++;
        }
        if(sum == k){
            maxLen = max(maxLen,right-left+1);
        }
        right++;
        if(right < n)
            sum = sum + a[right];

    }
    return maxLen;
